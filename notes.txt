127.0.0.1:6379> set name vishal
OK
127.0.0.1:6379> get name
"vishal"
127.0.0.1:6379> set mono 8976789098
OK
127.0.0.1:6379> get mono
"8976789098"
127.0.0.1:6379> get keys*
(nil)
127.0.0.1:6379> get keys *
(error) ERR wrong number of arguments for 'get' command
127.0.0.1:6379> keys *
1) "mono"
2) "name"
127.0.0.1:6379> exists mono
(integer) 1
127.0.0.1:6379> exists mono1
(integer) 0
127.0.0.1:6379> del mono
(integer) 1
127.0.0.1:6379> exists mono
(integer) 0
127.0.0.1:6379> keys *
1) "name"
127.0.0.1:6379> flushall
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379>




127.0.0.1:6379> set name vishal
OK
127.0.0.1:6379> ttl name
(integer) -1
127.0.0.1:6379> expire name 20
(integer) 1
127.0.0.1:6379> ttl name
(integer) 15
127.0.0.1:6379> ttl name
(integer) 11
127.0.0.1:6379> ttl name
(integer) 9


127.0.0.1:6379> ttl name
(integer) -2
127.0.0.1:6379> get name
(nil)



[
    {
        "id": 1,
        "title": "The Catcher in the Rye",
        "author": "J.D. Salinger",
        "description": "A classic novel about teenage angst",
        "price": 12.99,
        "pages": 224
    },
    {
        "id": 2,
        "title": "1984",
        "author": "George Orwell",
        "description": "A dystopian novel by George Orwell",
        "price": 9.99,
        "pages": 328
    },
    {
        "id": 3,
        "title": "The Great Gatsby",
        "author": "F. Scott Fitzgerald",
        "description": "A tale of the Jazz Age in America",
        "price": 11.99,
        "pages": 180
    },
    {
        "id": 4,
        "title": "Harry Potter and the Sorcerer's Stone",
        "author": "J.K. Rowling",
        "description": "The first book in the Harry Potter series",
        "price": 19.99,
        "pages": 320
    }
]






Redis primarily stores its data in RAM for extremely fast read and write operations⁴. The data is organized using key-value pairs, where keys are unique identifiers, and values can be of different types, including strings, lists, sets, sorted sets, hashes, bitmaps, and more⁴.

For data durability, Redis offers different persistence options⁴:
- **RDB Snapshot**: Redis periodically saves a point-in-time snapshot of the dataset to disk, which can be configured at intervals⁴.
- **AOF (Append-Only File)**: Redis logs every write operation in an append-only log file. This log can be used to reconstruct the dataset in case of data loss⁴.
- **Hybrid Persistence**: Redis allows you to use a combination of RDB and AOF for both efficiency and durability⁴.

When running inside a Docker container, Redis stores its data in the same default location as it would outside the container. The default location of the Redis data storage is `/data` within the container⁶.

As for the flow from hitting the request from UI to Redis database, it typically involves the following steps¹²:
1. **User Interaction**: The user interacts with the UI, which triggers an event in the application.
2. **Server Request**: This event results in a request to the server where your application is running.
3. **Data Fetching**: The server then communicates with Redis to fetch or manipulate the data. This could involve creating, reading, updating, or deleting data.
4. **Response**: The server receives the data from Redis, processes it if necessary, and sends it back to the client.
5. **UI Update**: Finally, the client-side of your application (the UI) receives this data and uses it to update the UI.

The exact flow can vary depending on the specifics of your application architecture and the libraries or frameworks you're using. For example, in a Node.js application using Express and socket.io, you might use the `lpush` method to push data to Redis and the `lrange` method to retrieve it². In the frontend (like Angular), you can get the data with `$http` service²..

(1) How does Redis store data? - GeeksforGeeks. https://www.geeksforgeeks.org/how-does-redis-store-data/.
(2) [Answered] Where Does Redis Store Data in Docker? - dragonflydb.io. https://www.dragonflydb.io/faq/where-does-redis-store-data-docker.
(3) Use the REST API | Redis Documentation Center. https://docs.redis.com/latest/rc/api/get-started/use-rest-api/.
(4) Retrieve data from Redis and display them on the frontend. https://stackoverflow.com/questions/31404133/retrieve-data-from-redis-and-display-them-on-the-frontend.
(5) Create an RPA Flow that Connects to Redis Data in UiPath Studio. https://www.cdata.com/kb/tech/redis-odbc-uipath.rst.
(6) Redis as an in-memory data structure store quick start guide. https://redis.io/docs/get-started/data-store/.
(7) How Does Redis Store Data: Detailed Insights - MarketSplash. https://marketsplash.com/tutorials/redis/how-does-redis-store-data/.
(8) undefined. https://api.redislabs.com/v1%29.
(9) en.wikipedia.org. https://en.wikipedia.org/wiki/Redis.